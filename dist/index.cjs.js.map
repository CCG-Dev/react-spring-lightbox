{"version":3,"file":"index.cjs.js","sources":["../src/components/ImageStage/utils/getTranslateOffsetsFromScale.ts","../src/components/ImageStage/utils/imageIsOutOfBounds.ts","../src/components/ImageStage/components/Image/index.tsx","../src/components/ImageStage/utils/useDoubleClick.tsx","../src/components/ImageStage/components/ImagePager/index.tsx","../src/components/ImageStage/components/SSRImagePager/SSRImagePager.tsx","../src/components/ImageStage/index.tsx","../src/components/ImageStage/utils/useRefSize.tsx","../src/components/PageContainer/index.tsx","../src/components/CreatePortal/index.tsx","../src/index.tsx"],"sourcesContent":["type IGetTranslateOffsetsFromScale = {\n    /** The current [x,y] translate values of image */\n    currentTranslate: [translateX: number, translateY: number];\n    /** The image dom node used as a reference to calculate translate offsets */\n    imageRef: React.RefObject<HTMLImageElement>;\n    /** The amount of change in the new transform scale */\n    pinchDelta: number;\n    /** The current transform scale of image */\n    scale: number;\n    /** The [x,y] coordinates of the zoom origin */\n    touchOrigin: [touchOriginX: number, touchOriginY: number];\n};\n\ntype ITranslateOffsetsReturnType = [translateX: number, translateY: number];\n\n/**\n * Calculates the the translate(x,y) coordinates needed to zoom-in\n * to a point in an image.\n *\n * @returns {array} The next [x,y] translate values to apply to image\n */\nconst getTranslateOffsetsFromScale = ({\n    currentTranslate: [translateX, translateY],\n    imageRef,\n    pinchDelta,\n    scale,\n    touchOrigin: [touchOriginX, touchOriginY],\n}: IGetTranslateOffsetsFromScale): ITranslateOffsetsReturnType => {\n    if (!imageRef?.current) {\n        return [0, 0];\n    }\n\n    const {\n        height: imageHeight,\n        left: imageTopLeftX,\n        top: imageTopLeftY,\n        width: imageWidth,\n    } = imageRef.current?.getBoundingClientRect();\n\n    // Get the (x,y) touch position relative to image origin at the current scale\n    const imageCoordX = (touchOriginX - imageTopLeftX - imageWidth / 2) / scale;\n    const imageCoordY =\n        (touchOriginY - imageTopLeftY - imageHeight / 2) / scale;\n\n    // Calculate translateX/Y offset at the next scale to zoom to touch position\n    const newTranslateX = -imageCoordX * pinchDelta + translateX;\n    const newTranslateY = -imageCoordY * pinchDelta + translateY;\n\n    return [newTranslateX, newTranslateY];\n};\n\nexport default getTranslateOffsetsFromScale;\n","/**\n * Determines if the provided image is within the viewport\n *\n * @returns True if image needs to be resized to fit viewport, otherwise false\n */\nconst imageIsOutOfBounds = (\n    imageRef: React.RefObject<HTMLImageElement>,\n): boolean => {\n    // If no ref is provided, return false\n    if (!imageRef.current) {\n        return false;\n    }\n\n    const {\n        bottom: bottomRightY,\n        left: topLeftX,\n        right: bottomRightX,\n        top: topLeftY,\n    } = imageRef.current?.getBoundingClientRect();\n    const { innerHeight: windowHeight, innerWidth: windowWidth } = window;\n\n    if (\n        topLeftX > windowWidth * (1 / 2) ||\n        topLeftY > windowHeight * (1 / 2) ||\n        bottomRightX < windowWidth * (1 / 2) ||\n        bottomRightY < windowHeight * (1 / 2)\n    )\n        return true;\n\n    return false;\n};\n\nexport default imageIsOutOfBounds;\n","import { animated, to, useSpring } from '@react-spring/web';\nimport {\n    getTranslateOffsetsFromScale,\n    imageIsOutOfBounds,\n    useDoubleClick,\n} from '../../utils';\nimport { useGesture } from 'react-use-gesture';\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled, { AnyStyledComponent } from 'styled-components';\nimport type { ImagesListItem } from '../../../../types/ImagesList';\n\nconst defaultImageTransform = {\n    pinching: false,\n    scale: 1,\n    translateX: 0,\n    translateY: 0,\n};\n\ntype IImageProps = {\n    /** Any valid <img /> props to pass to the lightbox img element ie src, alt, caption etc*/\n    imgProps: ImagesListItem;\n    /** Affects Width calculation method, depending on whether the Lightbox is Inline or not */\n    inline: boolean;\n    /** True if this image is currently shown in pager, otherwise false */\n    isCurrentImage: boolean;\n    /** Fixed height of the image stage, used to restrict maximum height of images */\n    pagerHeight: '100%' | number;\n    /** Indicates parent ImagePager is in a state of dragging, if true click to zoom is disabled */\n    pagerIsDragging: boolean;\n    /** Function that can be called to disable dragging in the pager */\n    setDisableDrag: (disable: boolean) => void;\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom: boolean;\n};\n\n/**\n * Animates pinch-zoom + panning on image using spring physics\n */\nconst Image = ({\n    imgProps: { style: imgStyleProp, ...restImgProps },\n    inline,\n    isCurrentImage,\n    pagerHeight,\n    pagerIsDragging,\n    setDisableDrag,\n    singleClickToZoom,\n}: IImageProps) => {\n    const [isPanningImage, setIsPanningImage] = useState<boolean>(false);\n    const imageRef = useRef<HTMLImageElement>(null);\n\n    /**\n     * Animates scale and translate offsets of Image as they change in gestures\n     *\n     * @see https://www.react-spring.io/docs/hooks/use-spring\n     */\n    const [{ scale, translateX, translateY }, springApi] = useSpring(() => ({\n        ...defaultImageTransform,\n        onChange: (result, instance) => {\n            if (result.value.scale < 1 || !result.value.pinching) {\n                instance.start(defaultImageTransform);\n            }\n\n            if (result.value.scale > 1 && imageIsOutOfBounds(imageRef)) {\n                instance.start(defaultImageTransform);\n            }\n        },\n        // Enable dragging in ImagePager if image is at the default size\n        onRest: (result, instance) => {\n            if (result.value.scale === 1) {\n                instance.start(defaultImageTransform);\n                setDisableDrag(false);\n            }\n        },\n    }));\n\n    // Reset scale of this image when dragging to new image in ImagePager\n    useEffect(() => {\n        if (!isCurrentImage && scale.get() !== 1) {\n            springApi.start(defaultImageTransform);\n        }\n    }, [isCurrentImage, scale, springApi]);\n\n    /**\n     * Update Image scale and translate offsets during pinch/pan gestures\n     *\n     * @see https://github.com/react-spring/react-use-gesture#usegesture-hook-supporting-multiple-gestures-at-once\n     */\n    useGesture(\n        {\n            onDrag: ({\n                cancel,\n                first,\n                memo = { initialTranslateX: 0, initialTranslateY: 0 },\n                movement: [xMovement, yMovement],\n                pinching,\n                tap,\n                touches,\n            }) => {\n                if (pagerIsDragging || scale.get() === 1 || tap) {\n                    return;\n                }\n\n                // Disable click to zoom during drag\n                if (xMovement && yMovement && !isPanningImage) {\n                    setIsPanningImage(true);\n                }\n\n                if (touches > 1) {\n                    return;\n                }\n                if (pinching || scale.get() <= 1) {\n                    return;\n                }\n\n                // Prevent dragging image out of viewport\n                if (scale.get() > 1 && imageIsOutOfBounds(imageRef)) {\n                    cancel();\n                    return;\n                } else {\n                    if (first) {\n                        return {\n                            initialTranslateX: translateX.get(),\n                            initialTranslateY: translateY.get(),\n                        };\n                    }\n\n                    // Translate image from dragging\n                    springApi.start({\n                        translateX: memo.initialTranslateX + xMovement,\n                        translateY: memo.initialTranslateY + yMovement,\n                    });\n\n                    return memo;\n                }\n            },\n            onDragEnd: ({ memo }) => {\n                if (memo !== undefined) {\n                    // Add small timeout to prevent onClick handler from firing after drag\n                    setTimeout(() => setIsPanningImage(false), 100);\n                }\n            },\n            onPinch: ({\n                cancel,\n                ctrlKey,\n                event,\n                last,\n                movement: [xMovement],\n                origin: [touchOriginX, touchOriginY],\n            }) => {\n                if (pagerIsDragging) {\n                    return;\n                }\n\n                // Prevent ImagePager from registering isDragging\n                setDisableDrag(true);\n\n                // Disable click to zoom during pinch\n                if (xMovement && !isPanningImage) {\n                    setIsPanningImage(true);\n                }\n\n                // Don't calculate new translate offsets on final frame\n                if (last) {\n                    cancel();\n                    return;\n                }\n\n                // Speed up pinch zoom when using mouse versus touch\n                const SCALE_FACTOR = ctrlKey ? 1000 : 250;\n                const pinchScale = scale.get() + xMovement / SCALE_FACTOR;\n                const pinchDelta = pinchScale - scale.get();\n\n                /**\n                 * Calculate touch origin for pinch/zoom\n                 *\n                 * if event is a touch event (React.TouchEvent<Element>, TouchEvent or WebKitGestureEvent) use touchOriginX/Y\n                 * if event is a wheel event (React.WheelEvent<Element> or WheelEvent) use the mouse cursor's clientX/Y\n                 */\n                let touchOrigin: [touchOriginX: number, touchOriginY: number] =\n                    [touchOriginX, touchOriginY];\n                if ('clientX' in event && 'clientY' in event && ctrlKey) {\n                    touchOrigin = [event.clientX, event.clientY];\n                }\n\n                // Calculate the amount of x, y translate offset needed to\n                // zoom-in to point as image scale grows\n                const [newTranslateX, newTranslateY] =\n                    getTranslateOffsetsFromScale({\n                        currentTranslate: [translateX.get(), translateY.get()],\n                        imageRef,\n                        pinchDelta,\n                        scale: scale.get(),\n                        // Use the [x, y] coords of mouse if a trackpad or ctrl + wheel event\n                        // Otherwise use touch origin\n                        touchOrigin,\n                    });\n\n                // Restrict the amount of zoom between half and 3x image size\n                if (pinchScale < 0.5) {\n                    springApi.start({ pinching: true, scale: 0.5 });\n                } else if (pinchScale > 3.0) {\n                    springApi.start({ pinching: true, scale: 3.0 });\n                } else {\n                    springApi.start({\n                        pinching: true,\n                        scale: pinchScale,\n                        translateX: newTranslateX,\n                        translateY: newTranslateY,\n                    });\n                }\n            },\n            onPinchEnd: () => {\n                if (!pagerIsDragging) {\n                    if (scale.get() > 1) {\n                        setDisableDrag(true);\n                    } else {\n                        springApi.start(defaultImageTransform);\n                    }\n                    // Add small timeout to prevent onClick handler from firing after panning\n                    setTimeout(() => setIsPanningImage(false), 100);\n                }\n            },\n        },\n        /**\n         * useGesture config\n         * @see https://github.com/react-spring/react-use-gesture#usegesture-config\n         */\n        {\n            domTarget: imageRef as React.RefObject<EventTarget>,\n            drag: {\n                filterTaps: true,\n            },\n            enabled: !inline,\n            eventOptions: {\n                passive: false,\n            },\n        },\n    );\n\n    // Handle click/tap on image\n    useDoubleClick({\n        [singleClickToZoom ? 'onSingleClick' : 'onDoubleClick']: (\n            e: MouseEvent,\n        ) => {\n            if (pagerIsDragging || isPanningImage) {\n                e.stopPropagation();\n                return;\n            }\n\n            // If tapped while already zoomed-in, zoom out to default scale\n            if (scale.get() !== 1) {\n                springApi.start(defaultImageTransform);\n                return;\n            }\n\n            // Zoom-in to origin of click on image\n            const { clientX: touchOriginX, clientY: touchOriginY } = e;\n            const pinchScale = scale.get() + 1;\n            const pinchDelta = pinchScale - scale.get();\n\n            // Calculate the amount of x, y translate offset needed to\n            // zoom-in to point as image scale grows\n            const [newTranslateX, newTranslateY] = getTranslateOffsetsFromScale(\n                {\n                    currentTranslate: [translateX.get(), translateY.get()],\n                    imageRef,\n                    pinchDelta,\n                    scale: scale.get(),\n                    touchOrigin: [touchOriginX, touchOriginY],\n                },\n            );\n\n            // Disable dragging in pager\n            setDisableDrag(true);\n            springApi.start({\n                pinching: true,\n                scale: pinchScale,\n                translateX: newTranslateX,\n                translateY: newTranslateY,\n            });\n        },\n        enabled: !inline,\n        latency: singleClickToZoom ? 0 : 200,\n        ref: imageRef,\n    });\n\n    return (\n        <AnimatedImage\n            $inline={inline}\n            className=\"lightbox-image\"\n            draggable=\"false\"\n            onClick={(e: React.MouseEvent<HTMLImageElement>) => {\n                // Don't close lighbox when clicking image\n                e.stopPropagation();\n                e.nativeEvent.stopImmediatePropagation();\n            }}\n            onDragStart={(e: React.DragEvent<HTMLImageElement>) => {\n                // Disable image ghost dragging in firefox\n                e.preventDefault();\n            }}\n            ref={imageRef}\n            style={{\n                ...imgStyleProp,\n                maxHeight: pagerHeight,\n                transform: to(\n                    [scale, translateX, translateY],\n                    (s, x, y) => `translate(${x}px, ${y}px) scale(${s})`,\n                ),\n                ...(isCurrentImage && { willChange: 'transform' }),\n            }}\n            // Include any valid img html attributes provided in the <Lightbox /> images prop\n            {...(restImgProps as React.ComponentProps<typeof animated.img>)}\n        />\n    );\n};\n\nImage.displayName = 'Image';\n\nexport default Image;\n\nconst AnimatedImage = styled(animated.img as AnyStyledComponent)`\n    width: auto;\n    height: auto;\n    max-width: 100%;\n    user-select: none;\n    touch-action: ${({ $inline }) => (!$inline ? 'none' : 'pan-y')};\n    ::selection {\n        background: none;\n    }\n`;\n","import React, { useEffect } from 'react';\n\ntype IUseDoubleClickProps = {\n    /** Set to false to disable onDoubleClick/onSingleClick  */\n    enabled?: boolean;\n    /** The amount of time (in milliseconds) to wait before differentiating a single from a double click */\n    latency?: number;\n    /** A callback function for double click events */\n    onDoubleClick?: (event: MouseEvent) => void;\n    /** A callback function for single click events */\n    onSingleClick?: (event: MouseEvent) => void;\n    /** Dom node to watch for double clicks */\n    ref: React.RefObject<HTMLElement>;\n};\n\n/**\n * React Hook that returns the current window size\n * and report updates from the 'resize' window event\n */\nconst useDoubleClick = ({\n    enabled = true,\n    latency = 300,\n    onDoubleClick = () => null,\n    onSingleClick = () => null,\n    ref,\n}: IUseDoubleClickProps) => {\n    useEffect(() => {\n        const clickRef = ref.current;\n        let clickCount = 0;\n        let timer: ReturnType<typeof setTimeout>;\n\n        const handleClick = (e: MouseEvent) => {\n            if (enabled) {\n                clickCount += 1;\n\n                timer = setTimeout(() => {\n                    if (clickCount === 1) onSingleClick(e);\n                    else if (clickCount === 2) onDoubleClick(e);\n\n                    clickCount = 0;\n                }, latency);\n            }\n        };\n\n        // Add event listener for click events\n        clickRef?.addEventListener('click', handleClick);\n\n        // Remove event listener\n        return () => {\n            clickRef?.removeEventListener('click', handleClick);\n\n            if (timer) {\n                clearTimeout(timer);\n            }\n        };\n    });\n};\n\nexport default useDoubleClick;\n","import React, {\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nimport { useGesture } from 'react-use-gesture';\nimport styled, { AnyStyledComponent } from 'styled-components';\n\nimport {\n    animated,\n    useSprings,\n} from '@react-spring/web';\n\nimport type { ImagesList } from '../../../../types/ImagesList';\nimport Image from '../Image';\n\ntype IImagePager = {\n    /** Index of image in images array that is currently shown */\n    currentIndex: number;\n    /** Overrides the default behavior of mousewheel */\n    disableMouseWheel?: boolean;\n    /** image stage height */\n    imageStageHeight: number;\n    /** image stage width */\n    imageStageWidth: number;\n    /** Array of image objects to be shown in Lightbox */\n    images: ImagesList;\n    /** Affects Width calculation method, depending on whether the Lightbox is Inline or not */\n    inline: boolean;\n    /** Function that closes the Lightbox */\n    onClose?: () => void;\n    /** Function that can be called to disable dragging in the pager */\n    onNext: () => void;\n    /** True if this image is currently shown in pager, otherwise false */\n    onPrev: () => void;\n    /** A React component that renders inside the image stage, useful for making overlays over the image */\n    renderImageOverlay: () => React.ReactNode;\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom: boolean;\n};\n\n/**\n * Gesture controlled surface that animates prev/next page changes via spring physics.\n */\nconst ImagePager = ({\n    currentIndex,\n    disableMouseWheel,\n    images,\n    imageStageHeight,\n    imageStageWidth,\n    inline,\n    onClose,\n    onNext,\n    onPrev,\n    renderImageOverlay,\n    singleClickToZoom,\n}: IImagePager) => {\n    const firstRender = useRef(true);\n\n    const [disableDrag, setDisableDrag] = useState<boolean>(false);\n    const [pagerHeight, setPagerHeight] = useState<'100%' | number>('100%');\n    const [isDragging, setIsDragging] = useState<boolean>(false);\n\n    //Determine the absolute height of the image pager\n    useEffect(() => {\n        const currPagerHeight = inline\n            ? imageStageHeight\n            : imageStageHeight - 50;\n\n        if (currPagerHeight !== pagerHeight) {\n            setPagerHeight(currPagerHeight);\n        }\n    }, [inline, pagerHeight, imageStageHeight]);\n\n    // Generate page positions based on current index\n    const getPagePositions = React.useCallback(\n        (i: number, down = false, xDelta = 0) => {\n            const x =\n                (i - currentIndex) * imageStageWidth + (down ? xDelta : 0);\n\n            if (i < currentIndex - 1 || i > currentIndex + 1) {\n                return { display: 'none', x };\n            }\n            return { display: 'flex', x };\n        },\n        [currentIndex, imageStageWidth],\n    );\n\n    /**\n     * Animates translateX of all images at the same time\n     *\n     * @see https://www.react-spring.io/docs/hooks/use-springs\n     */\n    const [pagerSprings, springsApi] = useSprings(images.length, (i) =>\n        getPagePositions(i),\n    );\n\n    // Animate page change if currentIndex changes\n    useEffect(() => {\n        // No need to set page position for initial render\n        if (firstRender.current) {\n            firstRender.current = false;\n            return;\n        }\n        // Update page positions after prev/next page state change\n        springsApi.start((i) => getPagePositions(i));\n    }, [currentIndex, getPagePositions, springsApi]);\n\n    /**\n     * Update each Image's visibility and translateX offset during dragging\n     *\n     * @see https://github.com/react-spring/react-use-gesture\n     */\n    const bind = useGesture(\n        {\n            onDrag: ({\n                active,\n                cancel,\n                direction: [xDir],\n                distance,\n                down,\n                movement: [xMovement],\n                tap,\n                touches,\n                velocity,\n            }) => {\n                // Disable drag if Image has been zoomed in to allow for panning\n                if (disableDrag || xMovement === 0 || tap) {\n                    return;\n                }\n                if (!isDragging) {\n                    setIsDragging(true);\n                }\n\n                const isHorizontalDrag = Math.abs(xDir) > 0.7;\n                const draggedFarEnough =\n                    down &&\n                    isHorizontalDrag &&\n                    distance > imageStageWidth / 3.5;\n                const draggedFastEnough =\n                    down && isHorizontalDrag && velocity > 2;\n\n                // Handle next/prev image from valid drag\n                if ((draggedFarEnough || draggedFastEnough) && active) {\n                    const goToIndex = xDir > 0 ? -1 : 1;\n\n                    // Cancel gesture event\n                    cancel();\n\n                    if (goToIndex > 0) {\n                        onNext();\n                    } else if (goToIndex < 0) {\n                        onPrev();\n                    }\n\n                    return;\n                }\n\n                // Don't move pager during two+ finger touch events, i.e. pinch-zoom\n                if (touches > 1) {\n                    cancel();\n                    return;\n                }\n\n                // Update page x-coordinates for single finger/mouse gestures\n                springsApi.start((i) => getPagePositions(i, down, xMovement));\n                return;\n            },\n            onDragEnd: () => {\n                if (isDragging) {\n                    springsApi.start((i) => getPagePositions(i));\n                    // Add small timeout buffer to prevent event handlers from firing in child Images\n                    setTimeout(() => setIsDragging(false), 100);\n                }\n            },\n            onWheel: ({ ctrlKey, direction: [xDir, yDir], velocity }) => {\n                // Disable drag if Image has been zoomed in to allow for panning\n                if (ctrlKey || disableDrag || velocity === 0) {\n                    return;\n                }\n\n                if (!isDragging) {\n                    setIsDragging(true);\n                }\n                console.log('onWheel', disableMouseWheel);\n                if (disableMouseWheel) {\n                    return;\n                }\n\n                const draggedFastEnough = velocity > 1.1;\n\n                // Handle next/prev image from valid drag\n                if (draggedFastEnough) {\n                    const goToIndex = xDir + yDir > 0 ? -1 : 1;\n\n                    if (goToIndex > 0) {\n                        onNext();\n                    } else if (goToIndex < 0) {\n                        onPrev();\n                    }\n                }\n            },\n            onWheelEnd: () => {\n                springsApi.start((i) => getPagePositions(i));\n                // Add small timeout buffer to prevent event handlers from firing in child Images\n                setTimeout(() => setIsDragging(false), 100);\n            },\n        },\n        {\n            drag: {\n                filterTaps: true,\n            },\n            wheel: {\n                enabled: !inline,\n            },\n        },\n    );\n\n    return (\n        <ImagePagerContainer>\n            {pagerSprings.map(({ display, x }, i) => (\n                <AnimatedImagePager\n                    $inline={inline}\n                    {...bind()}\n                    className=\"lightbox-image-pager\"\n                    key={i}\n                    onClick={() => {\n                        if (onClose) {\n                            return (\n                                Math.abs(x.get()) < 1 &&\n                                !disableDrag &&\n                                onClose()\n                            );\n                        }\n                    }}\n                    role=\"presentation\"\n                    style={{\n                        display,\n                        transform: x.to(\n                            (xInterp: number) => `translateX(${xInterp}px)`,\n                        ),\n                    }}\n                >\n                    <PagerContentWrapper>\n                        <PagerInnerContentWrapper>\n                            <ImageContainer\n                                $inline={inline}\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    e.nativeEvent.stopImmediatePropagation();\n                                }}\n                            >\n                                <Image\n                                    imgProps={images[i]}\n                                    inline={inline}\n                                    isCurrentImage={i === currentIndex}\n                                    pagerHeight={pagerHeight}\n                                    pagerIsDragging={isDragging}\n                                    setDisableDrag={setDisableDrag}\n                                    singleClickToZoom={singleClickToZoom}\n                                />\n                                {renderImageOverlay()}\n                            </ImageContainer>\n                        </PagerInnerContentWrapper>\n                    </PagerContentWrapper>\n                </AnimatedImagePager>\n            ))}\n        </ImagePagerContainer>\n    );\n};\n\nImagePager.displayName = 'ImagePager';\n\nexport default ImagePager;\n\nconst ImagePagerContainer = styled.div`\n    height: 100%;\n    width: 100%;\n`;\n\nconst PagerInnerContentWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst PagerContentWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n`;\n\nconst AnimatedImagePager = styled(animated.span as AnyStyledComponent)<{\n    $inline: boolean;\n}>`\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n    bottom: 0px;\n    height: 100%;\n    width: 100%;\n    will-change: transform;\n    touch-action: ${({ $inline }) => (!$inline ? 'none' : 'pan-y')};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst ImageContainer = styled.div<{ $inline: boolean }>`\n    position: relative;\n    touch-action: ${({ $inline }) => (!$inline ? 'none' : 'pan-y')};\n    user-select: none;\n    display: flex;\n    justify-content: center;\n    width: 100%;\n`;\n","import type { ImagesList } from '../../../../types/ImagesList';\nimport styled, { css } from 'styled-components';\nimport * as React from 'react';\n\ntype ISSRImagePagerProps = {\n    currentIndex: number;\n    images: ImagesList;\n};\n\nconst SSRImagePager = ({ currentIndex, images }: ISSRImagePagerProps) => {\n    return (\n        <ImagePagerContainer>\n            {images.map(({ alt, src }, i) => {\n                return (\n                    <Image\n                        $isCurrentImage={i === currentIndex}\n                        alt={alt}\n                        key={`${alt}-${src}-${i}`}\n                        src={src}\n                    />\n                );\n            })}\n        </ImagePagerContainer>\n    );\n};\n\nexport default SSRImagePager;\n\nconst ImagePagerContainer = styled.div`\n    width: 100%;\n    height: inherit;\n`;\n\nconst Image = styled.img<{ $isCurrentImage: boolean }>`\n    ${({ $isCurrentImage }) =>\n        !$isCurrentImage &&\n        css`\n            visibility: hidden;\n            display: none;\n        `}\n    height:100%;\n    width: 100%;\n    object-fit: contain;\n`;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nimport type { ImagesList } from '../../types/ImagesList';\nimport ImagePager from './components/ImagePager';\nimport SSRImagePager from './components/SSRImagePager/SSRImagePager';\nimport useRefSize from './utils/useRefSize';\n\ntype IImageStageProps = {\n    /** classnames are applied to the root ImageStage component */\n    className?: string;\n    /** Index of image in images array that is currently shown */\n    currentIndex: number;\n    /** Overrides the default behavior of mousewheel */\n    disableMouseWheel?: boolean;\n    /** Array of image objects to be shown in Lightbox */\n    images: ImagesList;\n    /** Affects Width calculation method, depending on whether the Lightbox is Inline or not */\n    inline: boolean;\n    /** Function that closes the Lightbox */\n    onClose?: () => void;\n    /** Function that can be called to disable dragging in the pager */\n    onNext: () => void;\n    /** True if this image is currently shown in pager, otherwise false */\n    onPrev: () => void;\n    /** A React component that renders inside the image stage, useful for making overlays over the image */\n    renderImageOverlay: () => React.ReactNode;\n    /** A React component that is used for next button in image pager */\n    renderNextButton: ({ canNext }: { canNext: boolean }) => React.ReactNode;\n    /** A React component that is used for previous button in image pager */\n    renderPrevButton: ({ canPrev }: { canPrev: boolean }) => React.ReactNode;\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom: boolean;\n};\n\n/**\n * Containing element for ImagePager and prev/next button controls\n */\nconst ImageStage = ({\n    className = '',\n    currentIndex,\n    disableMouseWheel,\n    images,\n    inline,\n    onClose,\n    onNext,\n    onPrev,\n    renderImageOverlay,\n    renderNextButton,\n    renderPrevButton,\n    singleClickToZoom,\n}: IImageStageProps) => {\n    // Extra sanity check that the next/prev image exists before moving to it\n    const canPrev = currentIndex > 0;\n    const canNext = currentIndex + 1 < images.length;\n\n    const onNextImage = canNext ? onNext : () => null;\n    const onPrevImage = canPrev ? onPrev : () => null;\n\n    const [{ height: containerHeight, width: containerWidth }, containerRef] =\n        useRefSize();\n\n    return (\n        <ImageStageContainer\n            className={className}\n            data-testid=\"lightbox-image-stage\"\n            ref={containerRef}\n        >\n            {renderPrevButton({ canPrev })}\n            {containerWidth ? (\n                <ImagePager\n                    currentIndex={currentIndex}\n                    disableMouseWheel={disableMouseWheel}\n                    images={images}\n                    imageStageHeight={containerHeight}\n                    imageStageWidth={containerWidth}\n                    inline={inline}\n                    onClose={onClose}\n                    onNext={onNextImage}\n                    onPrev={onPrevImage}\n                    renderImageOverlay={renderImageOverlay}\n                    singleClickToZoom={singleClickToZoom}\n                />\n            ) : inline ? (\n                <SSRImagePager currentIndex={currentIndex} images={images} />\n            ) : null}\n            {renderNextButton({ canNext })}\n        </ImageStageContainer>\n    );\n};\n\nexport default ImageStage;\n\nconst ImageStageContainer = styled.div`\n    position: relative;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\ntype RefSize = {\n    height: number;\n    width: number;\n};\n\ntype Node = HTMLDivElement | null;\n\ntype IUseRefSize = [refSize: RefSize, elementRef: (node: any) => void | null];\n\n/**\n * React Hook that returns the current ref size\n * and report updates from the 'resize' ref event\n *\n * @returns {RefSize} An object containing the ref width and height\n * @returns {elementRef} A callback ref to be used on the container being measured\n */\nconst useRefSize = (): IUseRefSize => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [node, setNode] = useState<Node>(null);\n    const [refSize, setRefSize] = useState<RefSize>({\n        height: ref.current?.clientHeight || 0,\n        width: ref.current?.clientWidth || 0,\n    });\n\n    const elementRef = useCallback((node: Node) => {\n        if (node !== null) {\n            setNode(node);\n\n            setRefSize({\n                height: node.clientHeight,\n                width: node.clientWidth,\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (node) {\n                const height = node.clientHeight;\n                const width = node.clientWidth;\n                if (height !== refSize.height || width !== refSize.width) {\n                    setRefSize({\n                        height,\n                        width,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('resize', handleResize);\n        window.addEventListener('orientationchange', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            window.removeEventListener('orientationchange', handleResize);\n        };\n    }, [node, refSize.height, refSize.width]);\n\n    return [refSize, elementRef];\n};\n\nexport default useRefSize;\n","import React from 'react';\nimport { useTransition, animated, config } from '@react-spring/web';\nimport styled, { AnyStyledComponent } from 'styled-components';\n\ntype IPageContainerProps = {\n    /** All child components of Lightbox */\n    children: React.ReactNode[];\n    /** Classes are applied to the root lightbox component */\n    className: string;\n    /** Flag that dictates if the lightbox is open or closed */\n    isOpen: boolean;\n    /** React-Spring useTransition config for page open/close animation */\n    pageTransitionConfig: any;\n    /** Inline styles are applied to the root lightbox component */\n    style: React.CSSProperties;\n};\n\n/**\n * Animates the lightbox as it opens/closes\n */\nconst PageContainer = ({\n    children,\n    className,\n    isOpen,\n    pageTransitionConfig,\n    style,\n}: IPageContainerProps) => {\n    const defaultTransition = {\n        config: { ...config.default, friction: 32, mass: 1, tension: 320 },\n        enter: { opacity: 1, transform: 'scale(1)' },\n        from: { opacity: 0, transform: 'scale(0.75)' },\n        leave: { opacity: 0, transform: 'scale(0.75)' },\n    };\n\n    const transitions = useTransition(isOpen, {\n        ...defaultTransition,\n        ...pageTransitionConfig,\n    });\n\n    return (\n        <>\n            {transitions(\n                (animatedStyles, item) =>\n                    item && (\n                        <AnimatedPageContainer\n                            className={`lightbox-container${\n                                className ? ` ${className}` : ''\n                            }`}\n                            data-testid=\"lightbox-container\"\n                            style={{ ...animatedStyles, ...style }}\n                        >\n                            {children}\n                        </AnimatedPageContainer>\n                    ),\n            )}\n        </>\n    );\n};\n\nexport default PageContainer;\n\nconst AnimatedPageContainer = styled(animated.div as AnyStyledComponent)`\n    display: flex;\n    flex-direction: column;\n    position: fixed;\n    z-index: 400;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\ntype ICreatePortal = {\n    children: any;\n};\n\n/**\n * Creates a SSR + next.js friendly React Portal inside <body />\n *\n * Child components are rendered on the client side only\n\n * @see https://reactjs.org/docs/portals.html\n */\nclass CreatePortal extends React.Component<ICreatePortal> {\n    portalContainer: HTMLDivElement;\n    body: HTMLElement;\n\n    // Only executes on the client-side\n    componentDidMount() {\n        // Get the document body\n        this.body = document.body;\n\n        // Create a container <div /> for React Portal\n        this.portalContainer = document.createElement('div');\n        this.portalContainer.setAttribute('class', 'lightbox-portal');\n\n        // Append the container to the document body\n        this.body.appendChild(this.portalContainer);\n\n        // Force a re-render as we're on the client side now\n        // children prop will render to portalContainer\n        this.forceUpdate();\n\n        // Add event listener to prevent trackpad/ctrl+mousewheel zooming of lightbox\n        // Zooming is handled specifically within /ImageStage/components/Image\n        this.portalContainer.addEventListener('wheel', this.preventWheel);\n    }\n\n    componentWillUnmount() {\n        // Remove wheel event listener\n        this.portalContainer.removeEventListener('wheel', this.preventWheel);\n\n        // Cleanup Portal from DOM\n        this.body.removeChild(this.portalContainer);\n    }\n\n    preventWheel = (e: WheelEvent) => e.preventDefault();\n\n    render() {\n        // Return null during SSR\n        if (this.portalContainer === undefined) return null;\n\n        const { children } = this.props;\n\n        return <>{ReactDOM.createPortal(children, this.portalContainer)}</>;\n    }\n}\n\nexport default CreatePortal;\n","import React, { useEffect } from 'react';\n\nimport {\n    CreatePortal,\n    ImageStage,\n    PageContainer,\n} from './components';\nimport type { ImagesList } from './types/ImagesList';\n\nexport type ImagesListType = ImagesList;\n\ntype ILightboxProps = {\n    /** classnames are applied to the root lightbox component */\n    className?: string;\n    /** Index of image in images array that is currently shown */\n    currentIndex: number;\n    /** Overrides the default behavior of mousewheel */\n    disableMouseWheel?: boolean;\n    /** Array of images to be shown in Lightbox, each image object may contain any valid 'img' attribute with the exceptions of 'draggable', 'onClick', 'onDragStart' and 'ref' */\n    images: ImagesList;\n    /** Determines whether the Lightbox returns just an Inline carousel (ImageStage) */\n    inline?: boolean;\n    /** Flag that dictates if the lightbox is open or closed */\n    isOpen: boolean;\n    /** Function that closes the Lightbox */\n    onClose?: () => void;\n    /** Function that changes currentIndex to next image in images */\n    onNext: () => void;\n    /** Function that changes currentIndex to previous image in images */\n    onPrev: () => void;\n    /** React-Spring useTransition config for page open/close animation */\n    pageTransitionConfig?: any;\n    /** A React component that renders below the image pager */\n    renderFooter?: () => React.ReactNode;\n    /** A React component that renders above the image pager */\n    renderHeader?: () => React.ReactNode;\n    /** A React component that renders inside the image stage, useful for making overlays over the image */\n    renderImageOverlay?: () => React.ReactNode;\n    /** A React component that is used for next button in image pager */\n    renderNextButton?: ({ canNext }: { canNext: boolean }) => React.ReactNode;\n    /** A React component that is used for previous button in image pager */\n    renderPrevButton?: ({ canPrev }: { canPrev: boolean }) => React.ReactNode;\n    /** Overrides the default behavior of double clicking causing an image zoom to a single click */\n    singleClickToZoom?: boolean;\n    /** Inline styles that are applied to the root lightbox component */\n    style?: React.CSSProperties;\n};\n\n/**\n * Gesture controlled lightbox that interpolates animations with spring physics.\n *\n * Demos and docs:\n * @see https://timellenberger.com/libraries/react-spring-lightbox\n *\n * GitHub repo:\n * @see https://github.com/tim-soft/react-spring-lightbox\n *\n * Built with:\n * @see https://github.com/react-spring/react-use-gesture\n * @see https://github.com/react-spring/react-spring\n * @see https://github.com/styled-components/styled-components\n */\nconst Lightbox = ({\n    className = '',\n    currentIndex,\n    disableMouseWheel = false,\n    images = [],\n    inline = false,\n    isOpen,\n    onClose,\n    onNext,\n    onPrev,\n    pageTransitionConfig = null,\n    renderFooter = () => null,\n    renderHeader = () => null,\n    renderImageOverlay = () => null,\n    renderNextButton = () => null,\n    renderPrevButton = () => null,\n    singleClickToZoom = false,\n    style = {},\n}: ILightboxProps) => {\n    // Handle event listeners for keyboard\n    useEffect(() => {\n        /**\n         * Prevent keyboard from controlling background page\n         * when lightbox is open\n         */\n        const preventBackgroundScroll = (e: KeyboardEvent) => {\n            const keysToIgnore = [\n                'ArrowUp',\n                'ArrowDown',\n                'End',\n                'Home',\n                'PageUp',\n                'PageDown',\n            ];\n\n            if (isOpen && keysToIgnore.includes(e.key)) e.preventDefault();\n        };\n\n        /**\n         * Navigate images with arrow keys, close on Esc key\n         */\n        const handleKeyboardInput = (e: KeyboardEvent) => {\n            if (isOpen) {\n                switch (e.key) {\n                    case 'ArrowLeft':\n                        onPrev();\n                        break;\n                    case 'ArrowRight':\n                        onNext();\n                        break;\n                    case 'Escape':\n                        onClose && onClose();\n                        break;\n                    default:\n                        e.preventDefault();\n                        break;\n                }\n            }\n        };\n\n        document.addEventListener('keyup', handleKeyboardInput);\n        document.addEventListener('keydown', preventBackgroundScroll);\n\n        return () => {\n            document.removeEventListener('keyup', handleKeyboardInput);\n            document.removeEventListener('keydown', preventBackgroundScroll);\n        };\n    });\n\n    const imageStage = (\n        <ImageStage\n            currentIndex={currentIndex}\n            disableMouseWheel={disableMouseWheel}\n            images={images}\n            inline={inline}\n            onClose={onClose}\n            onNext={onNext}\n            onPrev={onPrev}\n            renderImageOverlay={renderImageOverlay}\n            renderNextButton={renderNextButton}\n            renderPrevButton={renderPrevButton}\n            singleClickToZoom={singleClickToZoom}\n        />\n    );\n\n    if (inline) {\n        return imageStage;\n    }\n\n    return (\n        <CreatePortal>\n            <PageContainer\n                className={className}\n                isOpen={isOpen}\n                pageTransitionConfig={pageTransitionConfig}\n                style={style}\n            >\n                {renderHeader()}\n                {imageStage}\n                {renderFooter()}\n            </PageContainer>\n        </CreatePortal>\n    );\n};\n\nexport default Lightbox;\n"],"names":["getTranslateOffsetsFromScale","_ref","currentTranslate","translateX","translateY","imageRef","pinchDelta","scale","touchOrigin","touchOriginX","touchOriginY","current","height","imageHeight","left","imageTopLeftX","top","imageTopLeftY","width","imageWidth","getBoundingClientRect","imageIsOutOfBounds","bottom","bottomRightY","topLeftX","right","bottomRightX","topLeftY","innerHeight","windowHeight","innerWidth","windowWidth","window","defaultImageTransform","pinching","Image","imgProps","style","imgStyleProp","inline","isCurrentImage","pagerHeight","pagerIsDragging","setDisableDrag","singleClickToZoom","restImgProps","_objectWithoutProperties","_excluded","isPanningImage","setIsPanningImage","useState","useRef","springApi","useSpring","_objectSpread","onChange","result","instance","value","start","onRest","useEffect","get","useGesture","onDrag","_ref2","cancel","first","memo","initialTranslateX","initialTranslateY","movement","xMovement","yMovement","tap","touches","onDragEnd","_ref3","undefined","setTimeout","onPinch","_ref4","ctrlKey","event","last","origin","SCALE_FACTOR","pinchScale","clientX","clientY","newTranslateX","newTranslateY","onPinchEnd","domTarget","drag","filterTaps","enabled","eventOptions","passive","latency","onDoubleClick","onSingleClick","ref","clickRef","timer","clickCount","handleClick","e","addEventListener","removeEventListener","clearTimeout","useDoubleClick","stopPropagation","React","createElement","AnimatedImage","_extends","$inline","className","draggable","onClick","nativeEvent","stopImmediatePropagation","onDragStart","preventDefault","maxHeight","transform","to","s","x","y","willChange","displayName","styled","default","animated","img","_ref5","ImagePager","currentIndex","disableMouseWheel","images","imageStageHeight","imageStageWidth","onClose","onNext","onPrev","renderImageOverlay","firstRender","disableDrag","setPagerHeight","isDragging","setIsDragging","currPagerHeight","getPagePositions","useCallback","i","arguments","length","display","pagerSprings","springsApi","useSprings","bind","active","direction","xDir","distance","down","velocity","isHorizontalDrag","Math","abs","goToIndex","onWheel","yDir","console","log","onWheelEnd","wheel","ImagePagerContainer","map","AnimatedImagePager","key","role","xInterp","PagerContentWrapper","PagerInnerContentWrapper","ImageContainer","div","span","_ref6","SSRImagePager","alt","src","$isCurrentImage","css","ImageStage","renderNextButton","renderPrevButton","canPrev","canNext","onNextImage","onPrevImage","containerHeight","containerWidth","containerRef","useRefSize","node","setNode","refSize","setRefSize","clientHeight","clientWidth","elementRef","handleResize","ImageStageContainer","PageContainer","children","isOpen","pageTransitionConfig","defaultTransition","config","friction","mass","tension","enter","opacity","from","leave","transitions","useTransition","Fragment","animatedStyles","item","AnimatedPageContainer","CreatePortal","Component","constructor","super","_defineProperty","this","componentDidMount","body","document","portalContainer","setAttribute","appendChild","forceUpdate","preventWheel","componentWillUnmount","removeChild","render","props","ReactDOM","createPortal","renderFooter","renderHeader","preventBackgroundScroll","includes","handleKeyboardInput","imageStage"],"mappings":"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"}